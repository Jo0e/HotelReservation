@using Models.Models
@model Hotel

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    h1 {
        font-size: 2rem;
        margin-bottom: 1rem;
        color: #007bff;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }
</style>

<h1>Create a New Hotel</h1>
<h4>Hotel</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Create" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" rows="4"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Address" class="control-label"></label>
                <input asp-for="Address" class="form-control" />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="City" class="control-label"></label>
                <input asp-for="City" class="form-control" />
                <span asp-validation-for="City" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Stars" class="control-label"></label>
                <input asp-for="Stars" class="form-control" />
                <span asp-validation-for="Stars" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="CoverImg" class="control-label"></label>
                <input asp-for="CoverImg" class="form-control" type="file" name="ImgFile" />
                <span asp-validation-for="CoverImg" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input asp-for="CompanyId" class="form-control" type="hidden" value="@ViewData["CompanyId"]" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Create</button>
                <a asp-action="Index" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>
</div>
<div class="text-center mt-3">
    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.getElementById('citySearch').addEventListener('input', function () {
            const cityName = this.value.trim();
            if (cityName.length > 2) { // Fetch data when input length is greater than 2
                fetch(`https://secure.geonames.org/search?q=${encodeURIComponent(cityName)}&maxRows=10&username=JoOe`)
                    .then(response => response.text()) // GeoNames returns XML, parse as text
                    .then(xmlString => {
                        // Parse the XML string into a DOM object
                        const parser = new DOMParser();
                        const xmlDoc = parser.parseFromString(xmlString, "text/xml");

                        // Extract city names and countries from the XML
                        const geonames = xmlDoc.getElementsByTagName("geoname");
                        const citySelect = document.getElementById('City');
                        citySelect.innerHTML = ''; // Clear existing options

                        if (geonames.length > 0) {
                            Array.from(geonames).forEach(geoname => {
                                const cityName = geoname.getElementsByTagName("name")[0]?.textContent;
                                const countryName = geoname.getElementsByTagName("countryName")[0]?.textContent;

                                if (cityName && countryName) {
                                    const option = document.createElement('option');
                                    option.value = ${cityName} | ${countryName};
                                    option.textContent = `${cityName}, ${countryName}`;
                                    citySelect.appendChild(option);
                                }
                            });
                        } else {
                            const option = document.createElement('option');
                            option.textContent = 'No results found';
                            option.disabled = true;
                            citySelect.appendChild(option);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while fetching city data.');
                    });
            }
        });
    </script>
}
