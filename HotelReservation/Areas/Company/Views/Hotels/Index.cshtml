@using Models.Models
@model IEnumerable<Hotel>

@{
    ViewData["Title"] = "Hotel List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Scripts {
        ﻿﻿@if (TempData["success"] != null)
    {
        <script>
            toastr.success('@TempData["success"]')
        </script>
    }
}

<style>
    /* General Styling */
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f7fa;
    }

    h1 {
        color: #17a2b8;
        font-size: 2.5rem;
        margin-bottom: 20px;
        text-align: center;
    }

    .btn {
        margin-right: 10px;
        padding: 8px 15px;
        border-radius: 5px;
        text-decoration: none;
        font-size: 1rem;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .btn-warning {
        background-color: #ffc107;
        color: white;
    }

        .btn-warning:hover {
            background-color: #e0a800;
        }

    .btn-info {
        background-color: #17a2b8;
        color: white;
    }

        .btn-info:hover {
            background-color: #138496;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    /* Table Styling */
    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    th {
        background-color: #f8f9fa;
        color: #495057;
        font-size: 1rem;
        text-transform: uppercase;
    }

    td {
        font-size: 1rem;
        color: #6c757d;
    }

    .table-container {
        margin-top: 20px;
        padding: 20px;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .img-thumbnail {
        max-width: 100px;
        height: auto;
        border-radius: 5px;
    }

    /* Action Buttons Alignment */
    .hotel-actions {
        text-align: center;
    }

        .hotel-actions a {
            display: inline-block;
            margin: 5px;
            padding: 8px 15px;
            font-size: 0.9rem;
        }

            .hotel-actions a:hover {
                text-decoration: underline;
            }

    /* Responsive Design */
    media (max-width: 768px) {
        .table

    {
        width: 100%;
        font-size: 0.9rem;
    }

    th, td {
        padding: 10px;
    }

    .img-thumbnail {
        max-width: 80px;
    }

    .hotel-actions {
        text-align: left;
        margin-top: 10px;
    }

    .btn {
        padding: 6px 12px;
        font-size: 0.9rem;
    }
    /* Button with no background or border */
    .btn-transparent {
        background-color: transparent;
        border: none;
        color: #007bff; /* Optional: Set text color */
    }

        .btn-transparent:hover {
            background-color: transparent;
            color: #0056b3; /* Optional: Set text hover color */
            text-decoration: underline; /* Optional: Add hover effect */
        }
    }
</style>

<h1>@ViewData["Title"]</h1>
<form class="d-flex mb-4" method="get" asp-action="Index">
    <input class="form-control me-sm-2"
           type="search"
           placeholder="Search by Name or City or Address"
           value="@ViewBag.searchText"
           name="search" />
    <button class="btn btn-secondary my-2 my-sm-0" type="submit">Search</button>
</form>
<div class="mb-3 d-flex justify-content-between">
    <a asp-action="Create" class="btn btn-success">
        <i class="fas fa-plus"></i> Create New
    </a>
 @*    <a asp-action="Index" asp-controller="Amenity" class="btn btn-success">
        <i class="fas fa-tags"></i> Manage Amenities
    </a> *@
</div>

<div class="table-container">
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Address</th>
                <th>City</th>
                <th>Cover Image</th>
                <th>Company</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>@item.Address</td>
                    <td>@item.City</td>
                    <td><img src="~/images/homeImage/@item.CoverImg" class="img-thumbnail" style="max-width: 100px; height: auto;border-radius: 5px;object-fit: cover;"alt="Hotel Image"></td>
                    <td>@item.company.Email</td>
                    <td class="hotel-actions">
                        <div class="dropdown">
                            <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButton-@item.Id" data-bs-toggle="dropdown" aria-expanded="false">
                                Actions
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton-@item.Id">
                                <li>
                                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-transparent btn-sm text-start">
                                        <i class="fas fa-edit"></i> Edit
                                    </a>
                                </li>
                                <li>
                                    <a asp-action="ImageList" asp-route-hotelId="@item.Id" class="btn btn-transparent text-start btn-sm">
                                        <i class="fas fa-image"></i> View Image List
                                    </a>
                                </li>
                                <li>
                                    <a asp-controller="Rooms" asp-action="Index" asp-route-id="@item.Id" class="btn btn-transparent btn-sm text-start">
                                        <i class="fas fa-bed"></i> Rooms
                                    </a>
                                </li>
                                <li>
                                    <a asp-controller="HotelAmenity" asp-action="Index" asp-route-id="@item.Id" class="btn btn-transparent btn-sm text-start">
                                        <i class="fas fa-cogs"></i> View Amenities
                                    </a>
                                </li>
                                <li>
                                    <a asp-controller="Reservation" asp-action="Index" asp-route-id="@item.Id" class="btn btn-transparent btn-sm text-start">
                                        <i class="fas fa-cogs"></i> View All Reservation
                                    </a>
                                </li>
                                <li>
                                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#deleteModal"
                                       data-userid="@item.Id" data-username="@item.Name">Delete</a>
                                </li>
                            </ul>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<nav aria-label="Page navigation example" class="mt-5">
    <ul class="pagination justify-content-center">
        <li class="page-item @(ViewBag.CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="?pageNumber=@(ViewBag.CurrentPage - 1)">Previous</a>
        </li>
        @for (var i = 1; i <= Math.Ceiling((double)ViewBag.TotalItems / ViewBag.PageSize); i++)
        {
            <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                <a class="page-link" asp-action="Index" asp-route-search="@ViewBag.searchText" asp-route-pageNumber="@i" asp-route-pageSize="@ViewBag.PageSize">@i</a>
            </li>
        }
        <li class="page-item @(ViewBag.CurrentPage == Math.Ceiling((double)ViewBag.TotalItems / ViewBag.PageSize) ? "disabled" : "")">
            <a class="page-link" href="?pageNumber=@(ViewBag.CurrentPage + 1)">Next</a>
        </li>
    </ul>
</nav>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="deleteForm" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the Hotel <strong id="deleteUserName"></strong>?</p>
                    <input type="hidden" id="deleteUserId" name="id" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    const deleteModal = document.getElementById('deleteModal');
    deleteModal.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget; // Button that triggered the modal
        const userId = button.getAttribute('data-userid');
        const userName = button.getAttribute('data-username');
        // Update modal content
        const deleteUserName = deleteModal.querySelector('#deleteUserName');
        const deleteUserId = deleteModal.querySelector('#deleteUserId');
        deleteUserName.textContent = userName;
        deleteUserId.value = userId;
        // Set form action dynamically
        const deleteForm = deleteModal.querySelector('#deleteForm');
        deleteForm.action = '@Url.Action("Delete", "Hotels", new { area = "Company" })';
    });
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/signalr/5.0.13/signalr.min.js"></script>
<script src="~/js/site.js"></script>

<script>
    // Script for handling the HotelHub and Notifications
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub")
        .build();

    // Start the connection and handle errors
    async function start() {
        try {
            await connection.start();
            console.log("SignalR Connected.");
        } catch (err) {
            console.error(err);
            setTimeout(start, 5000); // Retry after 5 seconds
        }
    }

    // Start the SignalR connection
    start();

    // Define a function to receive admin notifications from the hub
    connection.on("AdminNotification", function (contactUsInfo) {
        console.log("Admin notification: " + contactUsInfo);

        const contact = JSON.parse(contactUsInfo);

        // Display Toastr notification
        toastr.info(`New Contact Us request from ${contact.Name}: ${contact.RequestType}`);

        // Update the table if it exists on the page
        const table = document.getElementById("contactRequestsTable");
        if (table) {
            const tbody = table.getElementsByTagName('tbody')[0];
            const newRow = tbody.insertRow();

            // Create cells for the new row
            const cell1 = newRow.insertCell(0);
            const cell2 = newRow.insertCell(1);
            const cell3 = newRow.insertCell(2);
            const cell4 = newRow.insertCell(3);

            // Populate cells with contact information
            cell1.innerHTML = contact.Name;
            cell2.innerHTML = contact.RequestType;
            cell3.innerHTML = contact.UserRequestString.length > 20 ? contact.UserRequestString.substring(0, 18) + "..." : contact.UserRequestString;

            // Create actions cell with buttons
            cell4.className = "text-center";
            cell4.innerHTML = `
                <div class="btn-group">
                    <a href="/Admin/ContactUs/Details?reqId=${contact.Id}" class="btn btn-info btn-sm" title="View Details">
                        <i class="bi bi-eye"></i> Details
                    </a>
                    <button type="button" class="btn btn-danger btn-sm delete-contact" data-bs-toggle="modal" data-bs-target="#deleteModal" data-id="${contact.Id}" title="Delete">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                    <a href="/Admin/ContactUs/ReadMessage?messageId=${contact.Id}" class="btn btn-outline-primary btn-sm read-status" title="Mark as Read">
                        <i class="bi bi-check2-all"></i>
                    </a>
                </div>
            `;

            // Scroll to the new row for visibility
            newRow.scrollIntoView();
        }
    });

    // SignalR connection for HotelHub
    const hotelConnection = new signalR.HubConnectionBuilder()
        .withUrl("/hotelHub")
        .build();

    async function startHotelConnection() {
        try {
            await hotelConnection.start();
            console.log("Connected to HotelHub.");
        } catch (err) {
            console.error("Error connecting to HotelHub:", err);
            setTimeout(startHotelConnection, 5000); // Retry connection
        }
    }

     startHotelConnection();

       hotelConnection.on("NewHotelAdded", function (hotelJson) {
        console.log("New hotel notification received:", hotelJson);

        const hotel = JSON.parse(hotelJson);

        // Display a Toastr notification
        if (window.toastr) {
            toastr.success(`A new hotel "${hotel.Name}" has been added in ${hotel.City}.`);
        } else {
            console.error("Toastr is not loaded. Please check your setup.");
        }

        // Generate hotel card dynamically
        const newHotelCard = `
        <div class="col-md-4 mb-4 mt-0">
            <div class="card h-100">
                <img src="/images/homeImage/${hotel.CoverImg}" loading="lazy" class="card-img-top" alt="${hotel.Name}" style="height: 200px; object-fit: cover;">
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title"><strong>${hotel.Name}</strong></h5>
                    <p>${'<i class="bi bi-star-fill" style="color: gold;"></i>'.repeat(hotel.Stars)}</p>
                    <p class="card-text"><i class="bi bi-geo-alt"></i>${hotel.City}</p>
                    <p class="card-text">
                        ${hotel.Rooms.some(p => p.IsAvailable)
                            ? '<span class="badge bg-success">Rooms Available</span>'
                            : '<span class="badge bg-danger">No Available Rooms</span>'}
                    </p>
                    <p class="card-text">
                        ${
                            hotel.HotelAmenities.length > 0
                                ? hotel.HotelAmenities.map(
                                      (amenity) => `
                            <span class="badge text-dark" style="background: linear-gradient(135deg, #c3cfe2, #f5f7fa);">
                                <img src="/images/amenities/${amenity.Amenity.Img}" style="height:20px;" alt="${amenity.Amenity.Name}" />
                                &ensp;${amenity.Amenity.Name}
                            </span>`
                                  ).join("")
                                : "No amenities available"
                        }
                    </p>
                    <a href="/Home/Details/${hotel.Id}" class="btn btn-primary mt-auto">View Details</a>
                </div>
            </div>
        </div>
        `;

        // Append the new hotel card to the list
        const hotelsContainer = document.querySelector('.row.row-cols-1.row-cols-md-3.g-3.mt-0');
        if (hotelsContainer) {
            hotelsContainer.insertAdjacentHTML("afterbegin", newHotelCard);
        } else {
            console.error("Hotels container not found. Please check your HTML structure.");
        }
    });
</script>
