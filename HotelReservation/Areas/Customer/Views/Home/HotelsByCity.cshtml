@model ICollection<Hotel>
<style>
    /* Home Page Styles */
    .container {
        margin-top: 0px;
        padding: 0px;
    }

    h1.text-center {
        font-size: 2.5rem;
        color: #343a40;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .card {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        overflow: hidden;
        transition: transform 0.3s, box-shadow 0.3s;
    }

    .card-body {
        display: flex;
        flex-direction: column;
    }

        .card-body .mt-auto {
            margin-top: auto;
        }

    .card:hover {
        transform: scale(1.05);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    }

    .card img {
        height: 200px;
        object-fit: cover;
    }

    .card-title {
        font-size: 1.25rem;
        color: #007bff;
        font-weight: bold;
    }

    .card .btn-primary {
        background-color: #007bff;
        border: none;
        border-radius: 5px;
    }

        .card .btn-primary:hover {
            background-color: #0056b3;
        }

    .pagination {
        justify-content: center;
        margin-top: 20px;
    }

        .pagination .page-item.active .page-link {
            background-color: #007bff;
            color: #fff;
            border-color: #007bff;
        }

</style>
<style>
    .search-header {
        text-align: center;
        margin-bottom: 10px;
        font-size: 15px;
        color: #555;
    }

    .rotator-text {
        display: inline-block;
        overflow: hidden;
        white-space: nowrap;
        animation: fadeInOut 4s linear infinite;
    }

    keyframes fadeInOut {
        0%, 100%

    {
        opacity: 0;
    }

    10%, 90% {
        opacity: 1;
    }

    }
</style>


<style>
    .badge {
        font-size: 0.8rem;
        margin: 5px auto;
        padding: 5px 10px;
        border-radius: 20px;
    }
</style>
<style>
    .btn-primary {
        background: linear-gradient(45deg, #007bff, #0056b3);
        transition: 0.3s;
    }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        }
</style>

<style>
    body {
        background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
    }
</style>
<style>
    h1.text-center {
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
    }
</style>
<style>
    .filter-sidebar {
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .filter-title {
        font-size: 1.5rem;
        color: #007bff;
        font-weight: bold;
    }


    .form-group label {
        font-size: 1rem;
        color: #555;
    }

    input[type="checkbox"] + label {
        margin-left: 10px;
    }

    #apply-filters {
        margin-top: 15px;
        background-color: #007bff;
        border: none;
        transition: 0.3s;
    }

        #apply-filters:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        }
</style>




<div class="container mt-4">
    <div class="search-header">
        <div id="search-rotator" class="rotator-text"></div>
    </div>
    <div class="container mt-4">
        <form class="d-flex mb-4" method="get" action="@Url.Action("HotelsByCity", "Home")">
            <input class="form-control me-sm-2"
                   type="search"
                   placeholder="Search by Name or Description or City or Address or Amenities"
                   value="@ViewBag.search"
                   name="search" />
            <input type="hidden" value="@ViewBag.City" name="city" />
            <button class="btn btn-secondary my-2 my-sm-0" type="submit">Search</button>
        </form>

        @if (ViewBag.search != null)
        {
            <h6 class="row-cols-1">
                Total Results: @ViewBag.totalResult
            </h6>
        }
        <br />
        <div class="text-center">
            <h1 class="animated-text"></h1>

            <script>

                const text = "Explore Amazing Hotels!";
                let index = 0;
                const target = document.querySelector(".animated-text");
                function typeWriter() {
                if (index < text.length) {
                target.textContent += text[index];
                index++;
                setTimeout(typeWriter, 100);
                }
                }
                typeWriter();
            </script>
        </div>
        <br />


        <div class="container mt-4">
            <div class="row">
                <div class="col-md-3 justify-content-start">
                    <form method="get" action="/Customer/Home/HotelsByCity" class="bg-light p-4 shadow rounded">
                        <h4 class="text-primary mb-4">Filter by:</h4>
                        <input type="hidden" name="city" value="@ViewBag.City" />

                        <div class="form-group mb-4">
                            <label class="fw-bold">Filtering On Stars :</label>
                            @for (var i = 1; i <= 5; i++)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="star @i" name="stars" value="@i" @(ViewBag.Stars.Contains(i) ? "checked" : "")>
                                    <label class="form-check-label" for="star @i">@i Stars</label>
                                </div>
                            }

                        </div>

                        <div class="form-group mb-4">
                            <label class="fw-bold">Filtring On Amenities:</label>

                            @foreach (var item in ViewBag.AllAmenities)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="@item.Name" name="amenities" value="@item.Name" @(ViewBag.Amenities != null && ViewBag.Amenities.Contains(@item.Name) ? "checked" : "")>
                                    <label class="form-check-label" for="@item.Name">@item.Name</label>
                                </div>
                            }
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Apply Filters</button>
                    </form>
                </div>



                <div class="col-md-9 ">
                    <div class="row">
                        @if (Model.Any())
                        {
                            <div class="row row-cols-1 row-cols-md-3 g-3 mt-0">

                            @foreach (var hotel in Model)
                            {
                                <div class="col-md-4 mb-4 mt-0">
                                    <div data-aos="fade-up" class="card h-100">
                                        <img src="~/images/homeImage/@hotel.CoverImg" loading="lazy" class="card-img-top" alt="@hotel.Name" style="height: 200px; object-fit: cover;">
                                        <div class="card-body d-flex flex-column" style="">
                                            <h5 class="card-title"><strong>@hotel.Name</strong> </h5>
                                            <p>
                                                @for (int i = 0; i < hotel.Stars; i++)
                                                {
                                                    <i class="bi bi-star-fill" style="color: gold;"></i>
                                                }
                                            </p>
                                            <p class="card-text">
                                                <i class="bi bi-geo-alt"></i>@hotel.City
                                            </p>
                                            <p class="card-text">
                                                @if (hotel.Rooms.Any(p => p.IsAvailable == true))
                                                {
                                                    <span class="badge bg-success">Rooms Available </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">No Available Rooms</span>
                                                }
                                            </p>

                                            <p class="card-text">
                                                @if (hotel.HotelAmenities.Any())
                                                {
                                                    @foreach (var amenity in hotel.HotelAmenities)
                                                    {
                                                            <span class="badge text-dark" style="background: linear-gradient(135deg, #c3cfe2,#f5f7fa);"><img src="~/images/amenities/@amenity.Amenity.Img" style="height:20px;" alt="Alternate Text" />&ensp;@amenity.Amenity.Name</span>
                                                    }
                                                }
                                                else
                                                {
                                                    <span>No amenities available</span>
                                                }
                                            </p>

                                            <a href="@Url.Action("Details", "Home", new { id = hotel.Id })" class="btn btn-primary mt-auto">View Details</a>
                                        </div>
                                    </div>
                                </div>
                            }
                            </div>
                        }
                        else
                        {
                            <p class="text-center">No hotels found.</p>
                        }
                    </div>
                </div>
            </div>
        </div>


        <!-- Pagination -->
        <nav aria-label="Page navigation example" class="mt-4">
            <ul class="pagination justify-content-center">
                <li class="page-item @(ViewBag.pageNumber <= 1 ? "disabled" : "")">
                    <a class="page-link" href="?pageNumber=@(ViewBag.pageNumber - 1)&city=@ViewBag.city&search=@ViewBag.search" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                @for (int i = 1; i <= ViewBag.totalPages; i++)
                {
                    <li class="page-item @(i == ViewBag.pageNumber ? "active" : "")">
                        <a class="page-link" href="?pageNumber=@i&city=@ViewBag.city&search=@ViewBag.search">@i</a>
                    </li>
                }
                <li class="page-item @(ViewBag.pageNumber >= ViewBag.totalPages ? "disabled" : "")">
                    <a class="page-link" href="?pageNumber=@(ViewBag.pageNumber + 1)&city=@ViewBag.city&search=@ViewBag.search" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/signalr/5.0.13/signalr.min.js"></script>
    <script src="~/js/site.js"></script>

    <script>
        // Script for handling the HotelHub and Notifications
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .build();

        // Start the connection and handle errors
        async function start() {
            try {
                await connection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.error(err);
                setTimeout(start, 5000); // Retry after 5 seconds
            }
        }

        // Start the SignalR connection
        start();

        // Define a function to receive admin notifications from the hub
        connection.on("AdminNotification", function (contactUsInfo) {
            console.log("Admin notification: " + contactUsInfo);

            const contact = JSON.parse(contactUsInfo);

            // Display Toastr notification
            toastr.info(`New Contact Us request from ${contact.Name}: ${contact.RequestType}`);

            // Update the table if it exists on the page
            const table = document.getElementById("contactRequestsTable");
            if (table) {
                const tbody = table.getElementsByTagName('tbody')[0];
                const newRow = tbody.insertRow();

                // Create cells for the new row
                const cell1 = newRow.insertCell(0);
                const cell2 = newRow.insertCell(1);
                const cell3 = newRow.insertCell(2);
                const cell4 = newRow.insertCell(3);

                // Populate cells with contact information
                cell1.innerHTML = contact.Name;
                cell2.innerHTML = contact.RequestType;
                cell3.innerHTML = contact.UserRequestString.length > 20 ? contact.UserRequestString.substring(0, 18) + "..." : contact.UserRequestString;

                // Create actions cell with buttons
                cell4.className = "text-center";
                cell4.innerHTML = `
                    <div class="btn-group">
                        <a href="/Admin/ContactUs/Details?reqId=${contact.Id}" class="btn btn-info btn-sm" title="View Details">
                            <i class="bi bi-eye"></i> Details
                        </a>
                        <button type="button" class="btn btn-danger btn-sm delete-contact" data-bs-toggle="modal" data-bs-target="#deleteModal" data-id="${contact.Id}" title="Delete">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                        <a href="/Admin/ContactUs/ReadMessage?messageId=${contact.Id}" class="btn btn-outline-primary btn-sm read-status" title="Mark as Read">
                            <i class="bi bi-check2-all"></i>
                        </a>
                    </div>
                `;

                // Scroll to the new row for visibility
                newRow.scrollIntoView();
            }
        });

        // SignalR connection for HotelHub
        const hotelConnection = new signalR.HubConnectionBuilder()
            .withUrl("/hotelHub")
            .build();

        async function startHotelConnection() {
            try {
                await hotelConnection.start();
                console.log("Connected to HotelHub.");
            } catch (err) {
                console.error("Error connecting to HotelHub:", err);
                setTimeout(startHotelConnection, 5000); // Retry connection
            }
        }

         startHotelConnection();

           hotelConnection.on("NewHotelAdded", function (hotelJson) {
            console.log("New hotel notification received:", hotelJson);

            const hotel = JSON.parse(hotelJson);

            // Display a Toastr notification
            if (window.toastr) {
                toastr.success(`A new hotel "${hotel.Name}" has been added in ${hotel.City}.`);
            } else {
                console.error("Toastr is not loaded. Please check your setup.");
            }

            // Generate hotel card dynamically
            const newHotelCard = `
            <div class="col-md-4 mb-4 mt-0">
                <div class="card h-100">
                    <img src="/images/homeImage/${hotel.CoverImg}" loading="lazy" class="card-img-top" alt="${hotel.Name}" style="height: 200px; object-fit: cover;">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title"><strong>${hotel.Name}</strong></h5>
                        <p>${'<i class="bi bi-star-fill" style="color: gold;"></i>'.repeat(hotel.Stars)}</p>
                        <p class="card-text"><i class="bi bi-geo-alt"></i>${hotel.City}</p>
                        <p class="card-text">
                            ${hotel.Rooms.some(p => p.IsAvailable)
                                ? '<span class="badge bg-success">Rooms Available</span>'
                                : '<span class="badge bg-danger">No Available Rooms</span>'}
                        </p>
                        <p class="card-text">
                            ${
                                hotel.HotelAmenities.length > 0
                                    ? hotel.HotelAmenities.map(
                                          (amenity) => `
                                <span class="badge text-dark" style="background: linear-gradient(135deg, #c3cfe2, #f5f7fa);">
                                    <img src="/images/amenities/${amenity.Amenity.Img}" style="height:20px;" alt="${amenity.Amenity.Name}" />
                                    &ensp;${amenity.Amenity.Name}
                                </span>`
                                      ).join("")
                                    : "No amenities available"
                            }
                        </p>
                        <a href="/Home/Details/${hotel.Id}" class="btn btn-primary mt-auto">View Details</a>
                    </div>
                </div>
            </div>
            `;

            // Append the new hotel card to the list
            const hotelsContainer = document.querySelector('.row.row-cols-1.row-cols-md-3.g-3.mt-0');
            if (hotelsContainer) {
                hotelsContainer.insertAdjacentHTML("afterbegin", newHotelCard);
            } else {
                console.error("Hotels container not found. Please check your HTML structure.");
            }
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const texts = [
                "Search by Name",
                "Search by Description",
                "Search by Amenities",
                "Search by Location"
            ];
            const rotatorElement = document.getElementById('search-rotator');
            let index = 0;

            function rotateText() {
                rotatorElement.textContent = texts[index];
                index = (index + 1) % texts.length;
            }

            rotateText();
            setInterval(rotateText, 4000);
        });
    </script>


    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const keywords = ["Name", "Description", "City", "Amenities"];
            const keywordElement = document.getElementById("search-keywords");
            let index = 0;

            function rotateKeywords() {
                keywordElement.textContent = keywords[index];
                index = (index + 1) % keywords.length;
            }

            setInterval(rotateKeywords, 2000);
            rotateKeywords();
        });
    </script>

