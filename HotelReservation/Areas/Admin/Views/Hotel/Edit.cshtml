@using Models.Models
@model Hotel

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ICollection<Company> companies = ViewBag.CompanyId;
}
<div class="d-flex align-items-center mt-3 mb-3">
    <a asp-action="Index" class="btn btn-outline-dark me-3">
        <i class="bi bi-arrow-left-circle-fill"></i> Back to List
    </a>
    <h1 class="flex-grow-1 m-0">Edit @Model.Name</h1>
</div>


<div class="card mx-auto" style="max-width: 600px;">
    <div class="card-body">
        <h4 class="card-title text-center">Hotel Details</h4>
        <hr />
        <form asp-action="Edit" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

            <input type="hidden" asp-for="Id" />

            <div class="form-group mb-3">
                <label asp-for="Name" class="form-label">Hotel Name</label>
                <input asp-for="Name" class="form-control" required />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Description" class="form-label">Description</label>
                <input asp-for="Description" class="form-control" required />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="City" class="form-label">City</label>
                <input type="text" value="@Model.City" id="citySearch" class="form-control mb-2" placeholder="Enter city name..." />
                <select id="City" asp-for="City" class="form-control" data-val="false"></select>
                <span asp-validation-for="City" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Address" class="form-label">Address</label>
                <input asp-for="Address" class="form-control" required />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>


            <div class="form-group mb-3">
                <label asp-for="Stars" class="form-label">Stars</label>
                <input asp-for="Stars" class="form-control" type="number" min="1" max="5" required />
                <span asp-validation-for="Stars" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="CoverImg" class="form-label">Cover Image</label>
                <input asp-for="CoverImg" class="form-control" type="file" name="ImgFile" data-val="false" />
                <span asp-validation-for="CoverImg" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="CompanyId" class="form-label" >Company</label>
                <select class="form-select" name="CompanyId" required>
                    <option selected hidden value="@companies.FirstOrDefault(e=>e.Id==Model.CompanyId).Id">@companies.FirstOrDefault(e=>e.Id==Model.CompanyId).Email</option>
                    @foreach (var item in companies)
                    {
                        <option value="@item.Id">@item.Email</option>
                    }
                </select>
            </div>

            <div class="d-grid">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </form>
    </div>
</div>



@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.getElementById('citySearch').addEventListener('input', function () {
            const cityName = this.value.trim();
            if (cityName.length > 2) { // Fetch data when input length is greater than 2
                fetch(`https://secure.geonames.org/search?q=${encodeURIComponent(cityName)}&maxRows=10&username=demo`)
                    .then(response => response.text()) // GeoNames returns XML, parse as text
                    .then(xmlString => {
                        // Parse the XML string into a DOM object
                        const parser = new DOMParser();
                        const xmlDoc = parser.parseFromString(xmlString, "text/xml");

                        // Extract city names and countries from the XML
                        const geonames = xmlDoc.getElementsByTagName("geoname");
                        const citySelect = document.getElementById('City');
                        citySelect.innerHTML = ''; // Clear existing options

                        if (geonames.length > 0) {
                            Array.from(geonames).forEach(geoname => {
                                const cityName = geoname.getElementsByTagName("name")[0]?.textContent;
                                const countryName = geoname.getElementsByTagName("countryName")[0]?.textContent;

                                if (cityName && countryName) {
                                    const option = document.createElement('option');
                                    option.value = `${cityName} | ${countryName}`;
                                    option.textContent = `${cityName}, ${countryName}`;
                                    citySelect.appendChild(option);
                                }
                            });
                        } else {
                            const option = document.createElement('option');
                            option.textContent = 'No results found';
                            option.disabled = true;
                            citySelect.appendChild(option);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while fetching city data.');
                    });
            }
        });
    </script>
}

<style>
    body {
        background-color: #f8f9fa;
        font-family: Arial, sans-serif;
    }

    h1 {
        color: #343a40;
    }

    .card {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        transition: background-color 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
        transition: background-color 0.3s ease;
    }

        .btn-secondary:hover {
            background-color: #565e64;
            border-color: #565e64;
        }

    .form-select, .form-control {
        border-radius: 5px;
    }

    label {
        font-weight: bold;
    }
</style>
